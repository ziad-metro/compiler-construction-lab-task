#include -> INCLUDE
<stdio.h> -> HEADER
int -> INT
main -> MAIN
( -> LP
) -> RP
{ -> LB
int -> INT
n -> ID
, -> COMMA
i -> ID
, -> COMMA
flag -> ID
= -> ASSIGN
0 -> NUMBER
; -> SEMI
printf -> PRINTF
( -> LP
" -> DOUBLE_QUOTE
Enter a positive integer:  -> STRING_CONTENT
" -> DOUBLE_QUOTE
) -> RP
; -> SEMI
scanf -> SCANF
( -> LP
" -> DOUBLE_QUOTE
%d -> FORMAT_SPECIFIER_D
" -> DOUBLE_QUOTE
, -> COMMA
& -> ADDRESS
n -> ID
) -> RP
; -> SEMI
if -> IF
( -> LP
n -> ID
== -> EQ
0 -> NUMBER
| -> UNKNOWN
| -> UNKNOWN
n -> ID
== -> EQ
1 -> NUMBER
) -> RP
{ -> LB
flag -> ID
= -> ASSIGN
1 -> NUMBER
; -> SEMI
} -> RB
else -> ELSE
{ -> LB
for -> FOR
( -> LP
i -> ID
= -> ASSIGN
2 -> NUMBER
; -> SEMI
i -> ID
<= -> LE
n -> ID
/ -> UNKNOWN
2 -> NUMBER
; -> SEMI
++ -> INCREMENT
i -> ID
) -> RP
{ -> LB
if -> IF
( -> LP
n -> ID
% -> MOD
i -> ID
== -> EQ
0 -> NUMBER
) -> RP
{ -> LB
flag -> ID
= -> ASSIGN
1 -> NUMBER
; -> SEMI
break -> ID
; -> SEMI
} -> RB
} -> RB
} -> RB
if -> IF
( -> LP
flag -> ID
== -> EQ
0 -> NUMBER
) -> RP
{ -> LB
printf -> PRINTF
( -> LP
" -> DOUBLE_QUOTE
%d is a prime number. -> STRING_CONTENT
\n -> ESCAPED_CHAR
" -> DOUBLE_QUOTE
, -> COMMA
n -> ID
) -> RP
; -> SEMI
} -> RB
else -> ELSE
{ -> LB
printf -> PRINTF
( -> LP
" -> DOUBLE_QUOTE
%d is not a prime number. -> STRING_CONTENT
\n -> ESCAPED_CHAR
" -> DOUBLE_QUOTE
, -> COMMA
n -> ID
) -> RP
; -> SEMI
} -> RB
return -> RETURN
0 -> NUMBER
; -> SEMI
} -> RB
